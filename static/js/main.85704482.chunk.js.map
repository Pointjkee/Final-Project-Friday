{"version":3,"sources":["common/superInputText/SuperInputText.module.css","common/superButton/SuperButton.module.css","common/superCheckbox/SuperCheckbox.module.css","common/superButton/SuperButton.tsx","common/superCheckbox/SuperCheckbox.tsx","common/superInputText/SuperInputText.tsx","Test.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","onChangeTest","onChangeCallback","e","currentTarget","checked","finalInputClassName","checkbox","SuperInputText","onChangeText","onKeyPress","onEnter","error","finalSpanClassName","errorInput","superInput","value","key","Test","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85704482.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3-uvM\",\"errorInput\":\"SuperInputText_errorInput__36AjH\",\"error\":\"SuperInputText_error__3gt55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__18nk9\",\"red\":\"SuperButton_red__4O9XB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1hhZ8\",\"spanClassName\":\"SuperCheckbox_spanClassName__3WXw7\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n    onChangeTest?: (e: ChangeEvent<HTMLInputElement>) => void\n  }\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children,\n        onChangeTest, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n        onChange && onChange(e)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={(e) => onChangeCallback(e)}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.errorInput}  ${s.superInput ? s.superInput : ''}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import SuperButton from \"./common/superButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/superCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"./common/superInputText/SuperInputText\";\r\nimport React from \"react\";\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SuperButton>Button</SuperButton>\r\n            </div>\r\n            <div>\r\n                <SuperCheckbox/>\r\n            </div>\r\n            <div>\r\n                <SuperInputText/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport {NavLink, Route, Routes} from \"react-router-dom\";\nimport {Test} from \"./Test\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <div><NavLink to='/login'> Go to login</NavLink></div>\n            <div><NavLink to='/register'> Go to Register</NavLink></div>\n            <div><NavLink to='/profile'> Go to Profile</NavLink></div>\n            <div><NavLink to='/newpassword'> Go to create new password</NavLink></div>\n            <div><NavLink to='/restore'> Go to restore password</NavLink></div>\n            <div><NavLink to='/test'> Go to test</NavLink></div>\n            <div><NavLink to='/404'> Go to 404</NavLink></div>\n            <Routes>\n                <Route path='/' element={<div>default</div>}/>\n                <Route path='login' element={<div>Login</div>}/>\n                <Route path=\"register\" element={<div>Register</div>}/>\n                <Route path=\"profile\" element={<div>Profile</div>}/>\n                <Route path=\"restore\" element={<div>Restore password</div>}/>\n                <Route path=\"newpassword\" element={<div>New Password</div>}/>\n                <Route path=\"test\" element={<Test/>}/>\n                <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\n            </Routes>\n\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}