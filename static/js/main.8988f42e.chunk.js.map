{"version":3,"sources":["component/profile/Profile.module.css","common/superInputText/SuperInputText.module.css","component/restorePassword/Restore.module.css","component/register/Register.module.css","common/superButton/SuperButton.module.css","common/superCheckbox/SuperCheckbox.module.css","component/header/Header.module.css","common/preloader/Preloader.module.css","component/packs/Packs.module.css","api/api.ts","reducers/restoreReducer.tsx","component/restorePassword/infoSentEmail/ErrorAlert.tsx","component/header/Header.tsx","reducers/registerReducer.tsx","component/register/Register.tsx","reducers/newPasswordReducer.tsx","component/newPassword/newPassword.tsx","component/restorePassword/RestorePassword.tsx","common/superButton/SuperButton.tsx","common/superCheckbox/SuperCheckbox.tsx","common/superInputText/SuperInputText.tsx","Test.tsx","reducers/appReducer.tsx","reducers/authReducer.tsx","reducers/profileReducer.tsx","assets/images/nonAvatarPic.png","common/preloader/Preloader.tsx","component/profile/Profile.tsx","component/login/Login.tsx","component/restorePassword/infoSentEmail/InfoSentEmail.tsx","reducers/packReducer.tsx","component/packs/Table.tsx","component/packs/Packs.tsx","component/routes/RoutesC.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","userAPI","email","password","post","forgot","newPassword","data","delete","profileAPI","put","packAPI","get","initialState","statusOfSentMessage","error","errorMessageEmail","type","Alert","React","props","ref","elevation","variant","ErrorAlert","useSelector","state","restorePass","dispatch","useDispatch","handleClose","event","reason","isOpen","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","sx","width","Header","className","s","container","to","isRegister","Register","memo","useState","setEmail","password1","setPassword1","password2","setPassword2","pass1","setPass1","pass2","setPass2","errorRegister","register","errorPassword","styles","main","Container","paddingBottom","marginTop","TextField","id","label","value","onChange","e","currentTarget","size","style","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","VisibilityOff","Visibility","color","Button","then","res","catch","response","status","setErrorAC","registerThunk","marginRight","textDecoration","statusNewPassword","useStyles","makeStyles","stylePaper","height","display","flexDirection","borderRadius","left","top","padding","justifyContent","alignItems","NewPassword","classes","token","useParams","newPass","navigation","useNavigate","pass","setPass","resetPasswordToken","changePassword","signupSchema","Yup","required","min","matches","formik","useFormik","initialValues","validationSchema","onSubmit","values","handleSubmit","Paper","touched","Boolean","errors","helperText","name","placeholder","handleChange","text","backgroundColor","RestorePassword","sendInstruction","from","message","shape","SuperButton","red","restProps","finalClassName","default","SuperCheckbox","onChangeChecked","children","spanClassName","onChangeTest","onChangeCallback","checked","finalInputClassName","checkbox","SuperInputText","onChangeText","onKeyPress","onEnter","styleInput","finalSpanClassName","errorInput","superInput","key","Test","setAppStatus","isLoggedIn","setIsLoggedInAC","profile","_id","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","setProfile","Preloader","loader","CircularProgress","Profile","app","auth","editMode","setEditMode","useForm","defaultValues","console","log","updatedUser","editProfile","activateEditMode","photo","src","nonAvatarPic","alt","info","onDoubleClick","form","info_form","Input","button","Login","validate","length","FormControl","FormLabel","FormGroup","getFieldProps","FormControlLabel","control","Checkbox","InfoSentEmail","cardPacks","user_id","path","cardsCount","grade","shots","rating","__v","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","getPack","columns","field","headerName","sortable","disableColumnMenu","align","renderCell","params","stopPropagation","api","thisRow","getAllColumns","filter","c","forEach","getValue","alert","JSON","stringify","DataTable","useEffect","rows","pack","map","t","actions","pageSize","rowsPerPageOptions","checkboxSelection","Packs","RoutesC","element","App","rootReducer","combineReducers","action","store","configureStore","reducer","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8988f42e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__9dShy\",\"form\":\"Profile_form__1igXE\",\"info_form\":\"Profile_info_form__1egpn\",\"photo\":\"Profile_photo__1o8EQ\",\"info\":\"Profile_info__2BTtl\",\"button\":\"Profile_button__20D9C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3-uvM\",\"errorInput\":\"SuperInputText_errorInput__36AjH\",\"error\":\"SuperInputText_error__3gt55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Restore_text__2hWHj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Register_main__1yitS\",\"container\":\"Register_container__1ydEp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__18nk9\",\"red\":\"SuperButton_red__4O9XB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1hhZ8\",\"spanClassName\":\"SuperCheckbox_spanClassName__3WXw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__OPBi9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__14u14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Packs_main__2OQnt\"};","import axios, {AxiosResponse} from 'axios'\r\nimport {ForgotType} from \"../reducers/restoreReducer\";\r\nimport {ChangePasswordType} from \"../reducers/newPasswordReducer\";\r\nimport {PostPackType, UpdatePackType} from \"../reducers/packReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\nexport const userAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post(`/auth/register/`, {email, password});\r\n    },\r\n    restorePassword(forgot: ForgotType) {\r\n        return instance.post<AxiosResponse<AuthResponseType>>(`/auth/forgot`, forgot)\r\n    },\r\n    changePassword(newPassword: ChangePasswordType) {\r\n        return instance.post<AxiosResponse<AuthResponseType>>(`/auth/set-new-password`, newPassword)\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType>('auth/login', data)\r\n    },\r\n    logOut() {\r\n        return instance.delete('/auth/me')\r\n    },\r\n    me() {\r\n        return instance.post('/auth/me')\r\n    },\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n    setProfile(data: SetProfileType) {\r\n        return instance.put('/auth/me', data)\r\n    }\r\n}\r\n\r\nexport const packAPI = {\r\n    getPack(data?: any) {\r\n        return instance.get<GetPackType>(`/cards/pack?pageCount=${16}`, data)\r\n    },\r\n    postPack(data?: PostPackType) {\r\n        return instance.post(`cards/pack`, data = {cardsPack: {}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack/?id=${id}`)\r\n    },\r\n    updatePack(data: UpdatePackType) {\r\n        return instance.put(`cards/pack`, data = {cardsPack:{_id:data.cardsPack._id,name:\"updatePackName\"}})\r\n    }\r\n\r\n}\r\n\r\nexport type GetPackType = {\r\n    cardPacks: [\r\n        {\r\n            _id: string\r\n            user_id: string\r\n            name: string\r\n            path: string\r\n            cardsCount: number\r\n            grade: number\r\n            shots: number\r\n            rating: number\r\n            type: string\r\n            created: string\r\n            updated: string\r\n            __v: number\r\n        },\r\n    ]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n\r\n}\r\n\r\nexport type SetProfileType = {\r\n    name: string\r\n    avatar: string | null\r\n}\r\n\r\ntype AuthResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\n\r\n\r\nconst initialState = {\r\n    statusOfSentMessage: false,\r\n    error: \"\",\r\n    email: \"\",\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: ActionRestoreType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"RESTORE/CHANGE-STATUS-MESSAGE\": {\r\n            return {...state, statusOfSentMessage: action.status}\r\n        }\r\n        case \"RESTORE/ERROR-MESSAGE\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"RESTORE/SET-EMAIL\": {\r\n            return {...state, email: action.email}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionRestoreType = StatusMessageType | ErrorMessageEmailType | SetEmailType\r\ntype StatusMessageType = ReturnType<typeof changeStatusMessage>\r\nexport const changeStatusMessage = (status: boolean) => ({type: \"RESTORE/CHANGE-STATUS-MESSAGE\", status} as const)\r\n\r\ntype ErrorMessageEmailType = ReturnType<typeof errorMessageEmail>\r\nexport const errorMessageEmail = (error: string) => ({type: \"RESTORE/ERROR-MESSAGE\", error} as const)\r\n\r\ntype SetEmailType = ReturnType<typeof setEmail>\r\nexport const setEmail = (email: string) => ({type: \"RESTORE/SET-EMAIL\", email} as const)\r\n\r\n\r\nexport const SendInstructionToEmail = (forgot: ForgotType) => (dispatch: Dispatch) => {\r\n    userAPI.restorePassword(forgot)\r\n        .then((res) => {\r\n            if (res.status === 200)\r\n                dispatch(setEmail(forgot.email))\r\n                dispatch(changeStatusMessage(true))\r\n        })\r\n        .catch(error => {\r\n                if (error.response.status === 404 || error.response.status === 401) {\r\n                    dispatch(errorMessageEmail(error.response.data.error))\r\n                }\r\n            }\r\n        )\r\n}\r\n\r\n\r\nexport type ForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}","import * as React from 'react';\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {errorMessageEmail} from \"../../../reducers/restoreReducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorAlert() {\r\n\r\n    const error = useSelector<AppRootStateType, string>(state => state.restorePass.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(errorMessageEmail(\"\"))\r\n    };\r\n\r\n\r\n    const isOpen = error !== \"\"\r\n\r\n    return (\r\n        <Snackbar anchorOrigin={{vertical: \"bottom\", horizontal: \"center\"}} open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ErrorAlert} from \"../restorePassword/infoSentEmail/ErrorAlert\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <NavLink to='/login'> Login</NavLink>\r\n            <NavLink to='/register'> Register</NavLink>\r\n            <NavLink to='/profile'> Profile</NavLink>\r\n            <ErrorAlert/>\r\n            <NavLink to='/restore'> Restore password</NavLink>\r\n            <NavLink to='/test'> Test</NavLink>\r\n            <NavLink to='/packs'> Packs</NavLink>\r\n            <NavLink to='/404'> 404</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import {Dispatch} from \"redux\"\r\nimport {userAPI} from \"../api/api\"\r\n\r\nconst initialState = {\r\n    error: null,\r\n    isRegister: false\r\n}\r\ntype initialStateType = {\r\n    error: string | null,\r\n    isRegister: boolean\r\n}\r\n// type InitialStateType = typeof initialState\r\ntype ActionType = registerACType | setErrorACType\r\n\r\nexport const registerReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER': {\r\n            return {...state, isRegister: action.isRegister}\r\n        }\r\n        case 'SET_ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype registerACType = ReturnType<typeof registerAC>\r\n\r\nconst registerAC = () => {\r\n    return {type: 'REGISTER', isRegister: true} as const\r\n}\r\n\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\nconst setErrorAC = (error: string | null) => {\r\n    return {type: 'SET_ERROR', error} as const\r\n}\r\nexport const registerThunk = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    userAPI.register(email, password)\r\n        .then((res) => {\r\n            dispatch(registerAC())\r\n        })\r\n        .catch((error) => {\r\n            if (error.response.status === 400) {\r\n                dispatch(setErrorAC(error.response.data.error))\r\n            }\r\n        })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from './Register.module.css'\r\nimport {registerThunk} from \"../../reducers/registerReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {Container, IconButton, InputAdornment, TextField} from \"@mui/material\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nexport const Register = React.memo(() => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password1, setPassword1] = useState<string>('')\r\n    const [password2, setPassword2] = useState<string>('')\r\n    const [pass1, setPass1] = useState<boolean>(false)\r\n    const [pass2, setPass2] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const errorRegister = useSelector<AppRootStateType, string | null>(state => state.register.error)\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.register.isRegister)\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword1 = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onChangePassword2 = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onChange = () => {\r\n        if (password1 === password2) {\r\n            dispatch(registerThunk(email, password1))\r\n        }\r\n    }\r\n    let errorPassword = false\r\n    if (password1 !== password2) {\r\n        errorPassword = true\r\n    }\r\n    if (isRegister) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    const togglePassword1 = () => {\r\n        setPass1(!pass1)\r\n    }\r\n    const togglePassword2 = () => {\r\n        setPass2(!pass2)\r\n    }\r\n    return (\r\n        <div className={styles.main}>\r\n            <Container\r\n                className={styles.container}\r\n                sx={{width: 400, paddingBottom: 5, marginTop:3}}\r\n            >\r\n                <h1>It-incubator</h1>\r\n                <h3>Sign Up</h3>\r\n                <div>\r\n                    <TextField\r\n                        id=\"outlined-name\"\r\n                        label=\"Email\"\r\n                        value={email}\r\n                        onChange={onChangeEmail}\r\n                        sx={{width: 300}}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n                <div style={{marginTop: 20}}>\r\n                    <TextField\r\n                        type={pass1 ? 'text' : 'password'}\r\n                        label='Password'\r\n                        size='small'\r\n                        sx={{width: 300}}\r\n                        value={password1}\r\n                        onChange={onChangePassword1}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={togglePassword1}\r\n                                        edge=\"end\"\r\n                                    >\r\n                                        {pass1 ? <VisibilityOff/> : <Visibility/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div style={{marginTop: 20}}>\r\n                        <TextField\r\n                            type={pass2 ? 'text' : 'password'}\r\n                            label='Confirm Password'\r\n                            size='small'\r\n                            sx={{width: 300}}\r\n                            value={password2}\r\n                            onChange={onChangePassword2}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={togglePassword2}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {pass2 ? <VisibilityOff/> : <Visibility/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {errorPassword\r\n                &&\r\n                <div style={{color: 'red'}}> Incorrect passwords!</div>\r\n                ||\r\n                !!errorRegister\r\n                &&\r\n                <div style={{color: 'red'}}>{errorRegister}</div>\r\n                }\r\n                <div style={{marginTop: 30}}>\r\n                    <Button\r\n                        size='medium'\r\n                        onClick={onChange}\r\n                        variant=\"contained\"\r\n                        style={{marginRight: 50}}\r\n                    >Register</Button>\r\n                    <Link to=\"/login\" style={{textDecoration: 'none'}}>\r\n                        <Button size='medium' variant=\"outlined\">Cancel</Button>\r\n                    </Link>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n})","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\nimport {errorMessageEmail} from \"./restoreReducer\";\r\n\r\nconst initialState = {\r\n    statusNewPassword: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ChangePasswordActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NEW-PASSWORD/CHANGE-STATUS-PASSWORD\":{\r\n            return {...state, statusNewPassword: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ChangePasswordActionsType = NewPasswordType\r\n\r\ntype NewPasswordType = ReturnType<typeof statusPasswordChange>\r\nexport const statusPasswordChange = (status: boolean) => ({type:\"NEW-PASSWORD/CHANGE-STATUS-PASSWORD\", status} as const)\r\n\r\nexport const changePassword = (newPassword: ChangePasswordType) => (dispatch:Dispatch) => {\r\n        userAPI.changePassword(newPassword)\r\n            .then(res=>{\r\n                    dispatch(statusPasswordChange(true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 404 || error.response.status === 401) {\r\n                    dispatch(errorMessageEmail(error.response.data.error))\r\n                }\r\n            })\r\n}\r\n\r\nexport type ChangePasswordType={\r\n    password: string\r\n    resetPasswordToken: string|undefined\r\n}\r\n","import React, {useState} from \"react\";\r\nimport s from '../restorePassword/Restore.module.css'\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {changePassword} from \"../../reducers/newPasswordReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as Yup from \"yup\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Paper, TextField} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {IconButton, InputAdornment} from \"@mui/material\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    stylePaper: {\r\n        width: \"413px\",\r\n        height: \"540px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"8px\",\r\n        left: \"434px\",\r\n        top: \"84px\",\r\n        padding: \"33px\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n    }\r\n});\r\n\r\nexport const NewPassword = () => {\r\n    const classes = useStyles()\r\n    const {token} = useParams()\r\n    const dispatch = useDispatch()\r\n    const statusNewPassword = useSelector<AppRootStateType, boolean>(state => state.newPass.statusNewPassword)\r\n    const navigation = useNavigate()\r\n    const [pass, setPass] = useState<boolean>(false)\r\n\r\n    const togglePassword = () => {\r\n        setPass(!pass)\r\n    }\r\n\r\n    const resetPasswordToken = token\r\n    const newPassword = (password: string) => {\r\n        if (token) {\r\n            dispatch(changePassword({password, resetPasswordToken}))\r\n        }\r\n    }\r\n\r\n    const signupSchema = Yup.object({\r\n        password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .min(7)\r\n            .matches(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{7,}/, \"Password must contain at least 7 characters, one uppercase, one number and one lowwer case character\")\r\n    });\r\n\r\n    if (statusNewPassword) {\r\n        navigation('/login')\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n        },\r\n        validationSchema: signupSchema,\r\n        onSubmit: values => {\r\n            newPassword(values.password)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <h3>Create new password </h3>\r\n                <TextField\r\n                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                    helperText={formik.touched.password && formik.errors.password}\r\n                    sx={{width: \"347px\"}}\r\n                    variant={'standard'}\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type={pass ? 'text' : 'password'}\r\n                    placeholder={\"Password\"}\r\n                    onChange={formik.handleChange}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={togglePassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {pass ? <VisibilityOff/> : <Visibility/>}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                />\r\n                <h4 className={s.text}>Create new password and we will send you further instruction to email</h4>\r\n                <Button sx={{borderRadius: '30px', backgroundColor: \"#21268F\", width: \"266px\"}} variant={\"contained\"} type=\"submit\">Create new password</Button>\r\n            </Paper>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport {SendInstructionToEmail} from \"../../reducers/restoreReducer\";\r\nimport s from './Restore.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Paper, TextField} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useStyles} from \"../newPassword/newPassword\";\r\n\r\nexport const RestorePassword = () => {\r\n    const navigation = useNavigate()\r\n    const statusOfSentMessage = useSelector<AppRootStateType, boolean>(state => state.restorePass.statusOfSentMessage)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const from = \"test-front-admin <ai73a@yandex.by>\"\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n\t<a href='https://pointjkee.github.io/Final-Project-Friday/#/set-new-password/$token$'>Change Password</a></div>`\r\n\r\n    const sendInstruction = (email: string) => {\r\n        dispatch(SendInstructionToEmail({email, from, message}))\r\n    }\r\n\r\n    if (statusOfSentMessage) {\r\n        navigation('/info-sent-email')\r\n    }\r\n\r\n    const signupSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Required field'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validationSchema: signupSchema,\r\n        onSubmit: values => {\r\n            sendInstruction(values.email)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <h3>Forgot your password? </h3>\r\n                <TextField\r\n                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                    helperText={formik.touched.email && formik.errors.email}\r\n                    sx={{width: \"347px\"}}\r\n                    variant={'standard'}\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder={\"Email\"}\r\n                    onChange={formik.handleChange}\r\n                />\r\n                <h4 className={s.text}>Enter your email address and we will send you further instructions </h4>\r\n                <Button sx={{borderRadius: '30px', backgroundColor: \"#21268F\", width: \"266px\"}} variant={\"contained\"} type=\"submit\">Send Instructions</Button>\r\n            </Paper>\r\n\r\n        </form>\r\n    );\r\n\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n    onChangeTest?: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n        onChangeTest, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        onChange && onChange(e)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={(e) => onChangeCallback(e)}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    styleInput?:string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, styleInput,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.errorInput}  ${s.superInput ? s.superInput : ''}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={styleInput}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import SuperButton from \"./common/superButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/superCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"./common/superInputText/SuperInputText\";\r\nimport React from \"react\";\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SuperButton>Button</SuperButton>\r\n            </div>\r\n            <div>\r\n                <SuperCheckbox/>\r\n            </div>\r\n            <div>\r\n                <SuperInputText/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","\r\nexport type RequestStatusType = 'loading' | 'success' | 'failed'\r\n\r\nexport const initialState = {\r\n    status: 'loading' as RequestStatusType\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => {\r\n    return {type: 'APP/SET_STATUS', status} as const;\r\n}\r\n\r\ntype ActionsType = SetAppStatusType\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>","import {userAPI, LoginParamsType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setProfile} from \"./profileReducer\";\r\nimport {setAppStatus} from \"./appReducer\";\r\n\r\ntype setIsLoggedInAT = {\r\n    type: 'LOGIN',\r\n    value: boolean\r\n}\r\ntype ActionsType = setIsLoggedInAT\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setIsLoggedInAC = (value: boolean): setIsLoggedInAT => ({type: 'LOGIN', value} as const)\r\n\r\nexport const loginThunk = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch) => {\r\n        userAPI.login(data)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    dispatch(setProfile(res.data))\r\n                    dispatch(setIsLoggedInAC(true))\r\n                }\r\n            })\r\n            .catch(e => {\r\n                    const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n                    console.log(error)\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\n\r\nexport const logOut = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    userAPI.logOut()\r\n        .then(res=>{\r\n            dispatch(setProfile({\r\n                _id: null,\r\n                email: null,\r\n                name: '',\r\n                avatar: null,\r\n                publicCardPacksCount: null,\r\n                created: null,\r\n                updated: null,\r\n                isAdmin: null,\r\n                verified: null,\r\n                rememberMe: null,\r\n                error: null})\r\n            )\r\n            dispatch(setAppStatus('success'))\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log(error)\r\n        })\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    userAPI.me()\r\n        .then(res => {\r\n            dispatch(setProfile(res.data))\r\n            dispatch(setAppStatus('success'))\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            console.log(error)\r\n            dispatch(setAppStatus('failed'))\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {profileAPI, SetProfileType} from \"../api/api\";\r\nimport {setAppStatus} from \"./appReducer\";\r\nimport {setIsLoggedInAC} from \"./authReducer\";\r\n\r\n\r\nexport type ActionTypes = ReturnType<typeof setProfile>\r\n\r\nexport type ProfileResponseType ={\r\n    _id: string | null;\r\n    email: string | null;\r\n    name: string\r\n    avatar?: string | null\r\n    publicCardPacksCount: number | null\r\n    created: Date | null\r\n    updated: Date | null\r\n    isAdmin: boolean | null\r\n    verified: boolean | null\r\n    rememberMe: boolean | null\r\n    error?: string | null\r\n}\r\n\r\nconst initialState = {\r\n    profile: {\r\n        _id: null as string | null,\r\n        email: null as string | null,\r\n        name: '',\r\n        avatar: null as string | null,\r\n        publicCardPacksCount: null as number | null,\r\n        created: null as Date | null,\r\n        updated: null as Date | null,\r\n        isAdmin: null as boolean | null,\r\n        verified: null as boolean | null,\r\n        rememberMe: null as boolean | null,\r\n        error: null as string | null,\r\n    }\r\n}\r\n\r\n\r\nexport type InitialStateTypeProfile = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateTypeProfile = initialState, action: ActionTypes): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case 'SET_PROFILE':\r\n       return {...state,profile: {...state.profile,...action.profile}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setProfile = (profile:ProfileResponseType) =>({\r\n    type: \"SET_PROFILE\", profile\r\n} as const )\r\n\r\n\r\n\r\nexport const editProfile = (data:SetProfileType) => (dispatch:Dispatch)=>{\r\n        dispatch(setAppStatus('loading'))\r\n    profileAPI.setProfile(data)\r\n        .then(res =>{\r\n            dispatch(setProfile(res.data.updatedUser))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatus('success'))\r\n        })\r\n        .catch(e =>{\r\n            const error = e.response ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log(error)\r\n            dispatch(setAppStatus('failed'))\r\n        })\r\n\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/nonAvatarPic.69bffc6f.png\";","import * as React from 'react';\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader=()=> {\r\n    return (\r\n       <div className={s.loader}>\r\n           <CircularProgress />\r\n       </div>\r\n    );\r\n}","import {Button, Input} from '@mui/material';\r\nimport React, {useState} from 'react';\r\nimport s from './Profile.module.css'\r\nimport {useForm} from \"react-hook-form\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {editProfile, InitialStateTypeProfile} from \"../../reducers/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport nonAvatarPic from \"../../assets/images/nonAvatarPic.png\"\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {logOut} from \"../../reducers/authReducer\";\r\nimport {RequestStatusType} from \"../../reducers/appReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\n\r\nconst Profile = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=> state.app.status)\r\n    const profile = useSelector<AppRootStateType, InitialStateTypeProfile>(state => state.profile);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const {\r\n        email,\r\n        name,\r\n        avatar\r\n    } = profile.profile\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const {register, handleSubmit} = useForm({defaultValues:{\r\n            name:name,\r\n            avatar:avatar\r\n        }})\r\n    const onSubmit = handleSubmit(data => {\r\n        console.log(data)\r\n        dispatch(editProfile(data))});\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n\r\n\r\n    const onLogOutClick = () => {\r\n        dispatch(logOut())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.photo}>\r\n                <span>Personal Information</span>\r\n                <img\r\n                    src={avatar ? avatar : nonAvatarPic}\r\n                    alt=\"photo\"/>\r\n            </div>\r\n            {status === 'loading' && <Preloader/>}\r\n            <div>\r\n                <Button onClick={onLogOutClick} variant=\"contained\">Log out</Button>\r\n            </div>\r\n            {!editMode && <div className={s.info}>\r\n                <span>NickName</span>\r\n                <div onDoubleClick={activateEditMode}>{name}</div>\r\n                <span>Email</span>\r\n                <div onDoubleClick={activateEditMode}>{email}</div>\r\n            </div>}\r\n\r\n            {editMode && <form className={s.form} onSubmit={onSubmit}>\r\n                <div className={s.info_form}>\r\n                    <span>NickName</span>\r\n                    <Input {...register('name')}/>\r\n                    <span>Image Url</span>\r\n                    <Input {...register('avatar')}/>\r\n                </div>\r\n                <div className={s.button}>\r\n                    <Button onClick={deactivateEditMode} variant=\"contained\" color=\"secondary\">Cancel</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">Save</Button>\r\n                </div>\r\n            </form>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n\r\n\r\n","import React from 'react'\r\nimport SuperButton from \"../../common/superButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../reducers/authReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {Navigate, NavLink} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField} from \"@material-ui/core\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n            validate: (values) => {\r\n                if (!values.email) {\r\n                    return {email: 'Email is required'}\r\n                }\r\n                if (!values.password) {\r\n                    return {password: 'Password is required'}\r\n                }\r\n                if (values.password.length < 7) {\r\n                    return {password: 'Password is at least seven characters'}\r\n                }\r\n            },\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            },\r\n            onSubmit: values => {\r\n                dispatch(loginThunk(values))\r\n            },\r\n        }\r\n    );\r\n    if (isLoggedIn) {\r\n        return <Navigate to='/profile'/>\r\n    }\r\n    return (\r\n        <>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>Login</FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label='Email' type='email' {...formik.getFieldProps('email')}/>\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField label='Password' type='password' {...formik.getFieldProps('password')}/>\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel label='Remember me'\r\n                                          control={<Checkbox\r\n                                              {...formik.getFieldProps('rememberMe')}\r\n                                              checked={formik.values.rememberMe}/>}/>\r\n                        <div>\r\n                            <NavLink to='/restore'>Forgot?</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <SuperButton type='submit'>sign in</SuperButton>\r\n                        </div>\r\n                    </FormGroup>\r\n                    <div>\r\n                        <NavLink to='/register'>Register</NavLink>\r\n                    </div>\r\n                </FormControl>\r\n            </form>\r\n        </>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {Paper} from \"@mui/material\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';\r\n\r\nconst useStyles = makeStyles({\r\n    stylePaper : {\r\n        width: \"413px\",\r\n        height: \"468px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"8px\",\r\n        left: \"434px\",\r\n        top: \"126px\",\r\n        padding: \"33px\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n    }\r\n});\r\n\r\nexport const InfoSentEmail = () => {\r\n    const email = useSelector<AppRootStateType, string>(s => s.restorePass.email)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n\r\n        <div style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <div>\r\n                    <SentimentVerySatisfiedIcon color={\"success\"} style={{width:\"108px\", height:\"108px\"}}/>\r\n                </div>\r\n                <h2  style={{color: \"green\"}}>Check Email </h2>\r\n                <h4 style={{color: \"#a9a9a9\"}}>We’ve sent an Email with instructions to email {email}</h4>\r\n            </Paper>\r\n       </div>\r\n    )\r\n}","import {GetPackType, packAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../store/store\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [\r\n        {\r\n            _id: '',\r\n            user_id: '',\r\n            name: '',\r\n            path: '',\r\n            cardsCount: 0,\r\n            grade: 0,\r\n            shots: 0,\r\n            rating: 0,\r\n            type: '',\r\n            created: '',\r\n            updated: '',\r\n            __v: 0,\r\n        },\r\n    ],\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 0,\r\n    pageCount: 0,\r\n}\r\nexport type cardPacksType =\r\n    { _id: string; user_id: string; name: string; path: string; cardsCount: number; grade: number; shots: number; rating: number; type: string; created: string; updated: string; __v: number; }[]\r\n\r\n\r\n\r\nexport type InitialStateTypeProfile = typeof initialState\r\n\r\nexport const packReducer = (state: InitialStateTypeProfile = initialState, action: SetPackType): InitialStateTypeProfile => {\r\n    switch (action.type) {\r\n        case \"PACK/SET-PACK\": {\r\n            // debugger\r\n            return {...state, cardPacks: action.data.cardPacks}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetPackType = ReturnType<typeof setStatePack>\r\nexport const setStatePack = (data: GetPackType) => ({type: \"PACK/SET-PACK\", data} as const)\r\n\r\nexport const getPack = (): PackThunkType => (dispatch) => {\r\n    packAPI.getPack().then(res => {\r\n        dispatch(setStatePack(res.data))\r\n    })\r\n}\r\n\r\nexport const addPack = (data?:PostPackType): PackThunkType => (dispatch) => {\r\n    packAPI.postPack(data).then(() => {\r\n        dispatch(getPack())\r\n    })\r\n\r\n}\r\n\r\nexport const deletePack = (id: string): PackThunkType => (dispatch) => {\r\n    packAPI.deletePack(id).then(() => {\r\n        dispatch(getPack())\r\n    })\r\n}\r\n\r\n\r\n//  dispatch(updatePack({cardsPack:{_id:\"61c2fd76b68c5b0004438b99\"} })) вот так передавать в санку))\r\nexport const updatePack = (data: UpdatePackType): PackThunkType => (dispatch) => {\r\n    packAPI.updatePack(data).then(()=> {\r\n        dispatch(getPack())\r\n    })\r\n}\r\n\r\nexport type PackThunkType = ThunkAction<void, AppRootStateType, unknown, SetPackType>\r\n\r\n\r\nexport type UpdatePackType = {\r\n    cardsPack: {\r\n        _id: string\r\n        name?: string\r\n    }\r\n}\r\n\r\nexport type PostPackType = {\r\n    cardsPack: {\r\n        name?: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: string\r\n    }\r\n}","import * as React from 'react';\r\nimport {DataGrid, GridApi, GridCellValue, GridColDef} from '@mui/x-data-grid';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useEffect} from \"react\";\r\nimport {cardPacksType, getPack} from \"../../reducers/packReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst columns: GridColDef[] = [\r\n    // {field: 'id', headerName: 'ID', width: 70 },\r\n    {field: 'name', headerName: 'Name pack', width: 650, sortable: false, disableColumnMenu: true},\r\n    {\r\n        field: 'cardsCount',\r\n        headerName: 'Cards count',\r\n        type: 'number',\r\n        width: 150,\r\n        align: 'center',\r\n        disableColumnMenu: true\r\n    },\r\n    {field: 'updated', headerName: 'Updated', width: 260, disableColumnMenu: true},\r\n    {\r\n        field: 'actions',\r\n        headerName: 'Actions',\r\n        width: 140,\r\n        align: 'right',\r\n        sortable: false,\r\n        disableColumnMenu: true,\r\n        renderCell: (params) => {\r\n            const onClick = (e: any) => {\r\n                e.stopPropagation(); // don't select this row after clicking\r\n                const api: GridApi = params.api;\r\n                const thisRow: Record<string, GridCellValue> = {};\r\n                api\r\n                    .getAllColumns()\r\n                    .filter((c) => c.field !== '__check__' && !!c)\r\n                    .forEach(\r\n                        (c) => (thisRow[c.field] = params.getValue(params.id, c.field)),\r\n                    );\r\n                return alert(JSON.stringify(thisRow, null, 4));\r\n            };\r\n            return <Button onClick={onClick}>Click</Button>;\r\n        },\r\n    }\r\n];\r\nexport default function DataTable() {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getPack())\r\n    }, [])\r\n\r\n    function createData(id: string, name: string, cardsCount: number, updated: string, actions: string) {\r\n        return {id, name, cardsCount, updated, actions};\r\n    }\r\n\r\n    const packs = useSelector<AppRootStateType, cardPacksType>(state => state.pack.cardPacks)\r\n    let rows = packs.map((t) => {\r\n        return createData(t._id, t.name, t.cardsCount, t.updated, 'add')\r\n    })\r\n\r\n    return (\r\n        <div style={{height: 480, width: '100%'}}>\r\n            <DataGrid\r\n                rows={rows}\r\n                columns={columns}\r\n                pageSize={7}\r\n                rowsPerPageOptions={[5]}\r\n                checkboxSelection={false}\r\n            />\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport DataTable from './Table';\r\nimport styles from './Packs.module.css'\r\n\r\n\r\nexport const Packs = () => {\r\n    return <div className={styles.main}>\r\n        <div><DataTable/></div>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Register} from \"../register/Register\";\r\nimport {RestorePassword} from \"../restorePassword/RestorePassword\";\r\nimport {Test} from \"../../Test\";\r\nimport Profile from \"../profile/Profile\";\r\nimport {Login} from \"../login/Login\";\r\nimport {NewPassword} from \"../newPassword/newPassword\";\r\nimport {InfoSentEmail} from \"../restorePassword/infoSentEmail/InfoSentEmail\";\r\nimport {Packs} from \"../packs/Packs\";\r\n\r\n\r\nconst RoutesC = () => {\r\n    return (\r\n        <div>\r\n            <Routes>\r\n                <Route path='/' element={<div>default</div>}/>\r\n                <Route path='login' element={<div><Login/></div>}/>\r\n                <Route path=\"register\" element={<Register/>}/>\r\n                <Route path=\"profile\" element={<Profile/>}/>\r\n                <Route path=\"restore\" element={<RestorePassword/>}/>\r\n                <Route path=\"/set-new-password/:token\" element={<NewPassword/>}/>\r\n                <Route path=\"info-sent-email\" element={<InfoSentEmail/>}/>\r\n                <Route path=\"test\" element={<Test/>}/>\r\n                <Route path=\"packs\" element={<Packs/>}/>\r\n                <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Routes>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RoutesC;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from \"./component/header/Header\";\r\nimport RoutesC from \"./component/routes/RoutesC\";\r\nimport {Preloader} from \"./common/preloader/Preloader\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {RequestStatusType} from \"./reducers/appReducer\";\r\nimport {authMe} from \"./reducers/authReducer\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [])\r\n\r\n    if (status === 'loading') {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <RoutesC/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"../reducers/authReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {registerReducer} from \"../reducers/registerReducer\";\r\nimport {profileReducer} from \"../reducers/profileReducer\";\r\nimport {restorePassReducer} from \"../reducers/restoreReducer\";\r\nimport {newPasswordReducer} from \"../reducers/newPasswordReducer\";\r\nimport {appReducer} from \"../reducers/appReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {packReducer} from \"../reducers/packReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    restorePass: restorePassReducer,\r\n    newPass: newPasswordReducer,\r\n    pack: packReducer,\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n            <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}