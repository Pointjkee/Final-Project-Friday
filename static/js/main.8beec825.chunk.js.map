{"version":3,"sources":["common/superButton/SuperButton.module.css","common/superCheckbox/SuperCheckbox.module.css","component/register/Register.module.css","common/superButton/SuperButton.tsx","common/superCheckbox/SuperCheckbox.tsx","common/superInputText/SuperInputText.tsx","Test.tsx","api/api.ts","reducers/restoreReducer.tsx","reducers/newPasswordReducer.tsx","component/newPassword/newPassword.tsx","component/restorePassword/RestorePassword.tsx","reducers/registerReducer.tsx","component/register/Register.tsx","component/restorePassword/infoSentEmail/InfoSentEmail.tsx","component/restorePassword/infoSentEmail/ErrorAlert.tsx","App.tsx","reportWebVitals.ts","reducers/authReducer.tsx","reducers/profileReducer.tsx","store/store.ts","index.tsx","common/superInputText/SuperInputText.module.css","component/restorePassword/Restore.module.css"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","onChangeTest","onChangeCallback","e","currentTarget","checked","finalInputClassName","checkbox","SuperInputText","onChangeText","onKeyPress","onEnter","error","styleInput","finalSpanClassName","errorInput","superInput","value","key","Test","instance","axios","create","baseURL","withCredentials","userAPI","email","password","post","forgot","newPassword","initialState","statusOfSentMessage","errorMessageEmail","statusNewPassword","useStyles","makeStyles","stylePaper","width","height","display","flexDirection","borderRadius","left","top","padding","justifyContent","alignItems","NewPassword","classes","token","useParams","dispatch","useDispatch","useSelector","state","newPass","navigation","useNavigate","resetPasswordToken","then","res","status","catch","response","data","changePassword","signupSchema","Yup","required","min","matches","formik","useFormik","initialValues","validationSchema","onSubmit","values","handleSubmit","style","Paper","TextField","touched","Boolean","errors","helperText","sx","variant","id","name","placeholder","handleChange","text","Button","backgroundColor","RestorePassword","restorePass","sendInstruction","from","message","shape","isRegister","Register","React","memo","useState","setEmail","password1","setPassword1","password2","setPassword2","pass1","setPass1","pass2","setPass2","errorRegister","register","errorPassword","to","styles","main","Container","container","paddingBottom","marginTop","label","size","InputProps","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","edge","VisibilityOff","Visibility","color","setErrorAC","registerThunk","marginRight","textDecoration","InfoSentEmail","Alert","props","ref","elevation","ErrorAlert","handleClose","event","reason","isOpen","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLoggedIn","rootReducer","combineReducers","auth","action","profile","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8beec825.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__18nk9\",\"red\":\"SuperButton_red__4O9XB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1hhZ8\",\"spanClassName\":\"SuperCheckbox_spanClassName__3WXw7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Register_main__1yitS\",\"container\":\"Register_container__1ydEp\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n    onChangeTest?: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n        onChangeTest, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n        onChange && onChange(e)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={(e) => onChangeCallback(e)}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    styleInput?:string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, styleInput,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.errorInput}  ${s.superInput ? s.superInput : ''}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={styleInput}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import SuperButton from \"./common/superButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/superCheckbox/SuperCheckbox\";\r\nimport SuperInputText from \"./common/superInputText/SuperInputText\";\r\nimport React from \"react\";\r\n\r\nexport const Test = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SuperButton>Button</SuperButton>\r\n            </div>\r\n            <div>\r\n                <SuperCheckbox/>\r\n            </div>\r\n            <div>\r\n                <SuperInputText/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import axios, {AxiosResponse} from 'axios'\r\nimport {ForgotType} from \"../reducers/restoreReducer\";\r\nimport {ChangePasswordType} from \"../reducers/newPasswordReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\nexport const userAPI = {\r\n    register(email: string, password: string) {\r\n        return instance.post(`/auth/register/`, {email, password});\r\n    },\r\n    restorePassword(forgot: ForgotType){\r\n        return instance.post<AxiosResponse<AuthResponseType>>(`/auth/forgot`, forgot)\r\n    },\r\n    changePassword(newPassword: ChangePasswordType){\r\n        return instance.post<AxiosResponse<AuthResponseType>>(`/auth/set-new-password`, newPassword)\r\n    }\r\n}\r\n\r\n\r\ntype AuthResponseType = {\r\n    info: string\r\n    error: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\n\r\n\r\nconst initialState = {\r\n    statusOfSentMessage: false,\r\n    error: \"\",\r\n    email: \"\",\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: ActionRestoreType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"RESTORE/CHANGE-STATUS-MESSAGE\": {\r\n            return {...state, statusOfSentMessage: action.status}\r\n        }\r\n        case \"RESTORE/ERROR-MESSAGE\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        case \"RESTORE/SET-EMAIL\": {\r\n            return {...state, email: action.email}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ActionRestoreType = StatusMessageType | ErrorMessageEmailType | SetEmailType\r\ntype StatusMessageType = ReturnType<typeof changeStatusMessage>\r\nexport const changeStatusMessage = (status: boolean) => ({type: \"RESTORE/CHANGE-STATUS-MESSAGE\", status} as const)\r\n\r\ntype ErrorMessageEmailType = ReturnType<typeof errorMessageEmail>\r\nexport const errorMessageEmail = (error: string) => ({type: \"RESTORE/ERROR-MESSAGE\", error} as const)\r\n\r\ntype SetEmailType = ReturnType<typeof setEmail>\r\nexport const setEmail = (email: string) => ({type: \"RESTORE/SET-EMAIL\", email} as const)\r\n\r\n\r\nexport const SendInstructionToEmail = (forgot: ForgotType) => (dispatch: Dispatch) => {\r\n    userAPI.restorePassword(forgot)\r\n        .then((res) => {\r\n            if (res.status === 200)\r\n                dispatch(setEmail(forgot.email))\r\n                dispatch(changeStatusMessage(true))\r\n        })\r\n        .catch(error => {\r\n                if (error.response.status === 404 || error.response.status === 401) {\r\n                    dispatch(errorMessageEmail(error.response.data.error))\r\n                }\r\n            }\r\n        )\r\n}\r\n\r\n\r\nexport type ForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\nimport {errorMessageEmail} from \"./restoreReducer\";\r\n\r\nconst initialState = {\r\n    statusNewPassword: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ChangePasswordActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NEW-PASSWORD/CHANGE-STATUS-PASSWORD\":{\r\n            return {...state, statusNewPassword: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ChangePasswordActionsType = NewPasswordType\r\n\r\ntype NewPasswordType = ReturnType<typeof statusPasswordChange>\r\nexport const statusPasswordChange = (status: boolean) => ({type:\"NEW-PASSWORD/CHANGE-STATUS-PASSWORD\", status} as const)\r\n\r\nexport const changePassword = (newPassword: ChangePasswordType) => (dispatch:Dispatch) => {\r\n        userAPI.changePassword(newPassword)\r\n            .then(res=>{\r\n                    dispatch(statusPasswordChange(true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 404 || error.response.status === 401) {\r\n                    dispatch(errorMessageEmail(error.response.data.error))\r\n                }\r\n            })\r\n}\r\n\r\nexport type ChangePasswordType={\r\n    password: string\r\n    resetPasswordToken: string|undefined\r\n}\r\n","import React from \"react\";\r\nimport s from '../restorePassword/Restore.module.css'\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport {changePassword} from \"../../reducers/newPasswordReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport * as Yup from \"yup\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Paper, TextField} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    stylePaper: {\r\n        width: \"413px\",\r\n        height: \"540px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"8px\",\r\n        left: \"434px\",\r\n        top: \"84px\",\r\n        padding: \"33px\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n    }\r\n});\r\n\r\nexport const NewPassword = () => {\r\n    const classes = useStyles()\r\n    const {token} = useParams()\r\n    const dispatch = useDispatch()\r\n    const statusNewPassword = useSelector<AppRootStateType, boolean>(state => state.newPass.statusNewPassword)\r\n    const navigation = useNavigate()\r\n\r\n    const resetPasswordToken = token\r\n    const newPassword = (password: string) => {\r\n        if (token) {\r\n            dispatch(changePassword({password, resetPasswordToken}))\r\n        }\r\n    }\r\n\r\n    const signupSchema = Yup.object({\r\n        password: Yup.string()\r\n            .required('Please Enter your password')\r\n            .min(7)\r\n            .matches(/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{7,}/, \"Password must contain at least 7 characters, one uppercase, one number and one lowwer case character\")\r\n    });\r\n\r\n    if (statusNewPassword) {\r\n        navigation('/login')\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: \"\",\r\n        },\r\n        validationSchema: signupSchema,\r\n        onSubmit: values => {\r\n            newPassword(values.password)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <h3>Create new password </h3>\r\n                <TextField\r\n                    error={formik.touched.password && Boolean(formik.errors.password)}\r\n                    helperText={formik.touched.password && formik.errors.password}\r\n                    sx={{width: \"347px\"}}\r\n                    variant={'standard'}\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type={\"password\"}\r\n                    placeholder={\"Password\"}\r\n                    onChange={formik.handleChange}\r\n                />\r\n                <h4 className={s.text}>Create new password and we will send you further instruction to email</h4>\r\n                <Button sx={{borderRadius: '30px', backgroundColor: \"#21268F\", width: \"266px\"}} variant={\"contained\"} type=\"submit\">Create new password</Button>\r\n            </Paper>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport { makeStyles } from '@mui/styles'\r\nimport s from '../restorePassword/Restore.module.css'\r\nimport {SendInstructionToEmail} from \"../../reducers/restoreReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {useFormik} from \"formik\";\r\nimport {Button, Paper, TextField} from \"@material-ui/core\";\r\nimport * as Yup from 'yup';\r\nimport {useStyles} from \"../newPassword/newPassword\";\r\n\r\nexport const RestorePassword = () => {\r\n    const navigation = useNavigate()\r\n    const statusOfSentMessage = useSelector<AppRootStateType, boolean>(state => state.restorePass.statusOfSentMessage)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const from = \"test-front-admin <ai73a@yandex.by>\"\r\n    const message = `<div style=\"background-color: lime; padding: 15px\">\r\n\t<a href='http://localhost:3000/#/set-new-password/$token$'>\t\r\n\tlink</a></div>`\r\n\r\n    const sendInstruction = (email: string) => {\r\n        dispatch(SendInstructionToEmail({email, from, message}))\r\n    }\r\n\r\n    if (statusOfSentMessage) {\r\n        navigation('/info-sent-email')\r\n    }\r\n\r\n    const signupSchema = Yup.object().shape({\r\n        email: Yup.string()\r\n            .email('Invalid email')\r\n            .required('Required field'),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n        },\r\n        validationSchema: signupSchema,\r\n        onSubmit: values => {\r\n            sendInstruction(values.email)\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <h3>Forgot your password? </h3>\r\n                <TextField\r\n                    error={formik.touched.email && Boolean(formik.errors.email)}\r\n                    helperText={formik.touched.email && formik.errors.email}\r\n                    sx={{width: \"347px\"}}\r\n                    variant={'standard'}\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder={\"Email\"}\r\n                    onChange={formik.handleChange}\r\n                />\r\n                <h4 className={s.text}>Enter your email address and we will send you further instructions </h4>\r\n                <Button sx={{borderRadius: '30px', backgroundColor: \"#21268F\", width: \"266px\"}} variant={\"contained\"} type=\"submit\">Send Instructions</Button>\r\n            </Paper>\r\n\r\n        </form>\r\n    );\r\n\r\n}","import {Dispatch} from \"redux\"\r\nimport {userAPI} from \"../api/api\"\r\n\r\nconst initialState = {\r\n    error: null,\r\n    isRegister: false\r\n}\r\ntype initialStateType = {\r\n    error: string | null,\r\n    isRegister: boolean\r\n}\r\n// type InitialStateType = typeof initialState\r\ntype ActionType = registerACType | setErrorACType\r\n\r\nexport const registerReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'REGISTER': {\r\n            return {...state, isRegister: action.isRegister}\r\n        }\r\n        case 'SET_ERROR': {\r\n            return {...state, error: action.error}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype registerACType = ReturnType<typeof registerAC>\r\n\r\nconst registerAC = () => {\r\n    return {type: 'REGISTER', isRegister: true} as const\r\n}\r\n\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\nconst setErrorAC = (error: string | null) => {\r\n    return {type: 'SET_ERROR', error} as const\r\n}\r\nexport const registerThunk = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    userAPI.register(email, password)\r\n        .then((res) => {\r\n            dispatch(registerAC())\r\n        })\r\n        .catch((error) => {\r\n            if (error.response.status === 400) {\r\n                dispatch(setErrorAC(error.response.data.error))\r\n            }\r\n        })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport styles from './Register.module.css'\r\nimport {registerThunk} from \"../../reducers/registerReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {Container, IconButton, InputAdornment, TextField} from \"@mui/material\";\r\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nexport const Register = React.memo(() => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password1, setPassword1] = useState<string>('')\r\n    const [password2, setPassword2] = useState<string>('')\r\n    const [pass1, setPass1] = useState<boolean>(false)\r\n    const [pass2, setPass2] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const errorRegister = useSelector<AppRootStateType, string | null>(state => state.register.error)\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.register.isRegister)\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword1 = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n    const onChangePassword2 = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setPassword2(e.currentTarget.value)\r\n    }\r\n    const onChange = () => {\r\n        if (password1 === password2) {\r\n            dispatch(registerThunk(email, password1))\r\n        }\r\n    }\r\n    let errorPassword = false\r\n    if (password1 !== password2) {\r\n        errorPassword = true\r\n    }\r\n    if (isRegister) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    const togglePassword1 = () => {\r\n        setPass1(!pass1)\r\n    }\r\n    const togglePassword2 = () => {\r\n        setPass2(!pass2)\r\n    }\r\n    return (\r\n        <div className={styles.main}>\r\n            <Container\r\n                className={styles.container}\r\n                sx={{width: 400, paddingBottom: 5, marginTop:3}}\r\n            >\r\n                <h1>It-incubator</h1>\r\n                <h3>Sign Up</h3>\r\n                <div>\r\n                    <TextField\r\n                        id=\"outlined-name\"\r\n                        label=\"Email\"\r\n                        value={email}\r\n                        onChange={onChangeEmail}\r\n                        sx={{width: 300}}\r\n                        size='small'\r\n                    />\r\n                </div>\r\n                <div style={{marginTop: 20}}>\r\n                    <TextField\r\n                        type={pass1 ? 'text' : 'password'}\r\n                        label='Password'\r\n                        size='small'\r\n                        sx={{width: 300}}\r\n                        value={password1}\r\n                        onChange={onChangePassword1}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={togglePassword1}\r\n                                        edge=\"end\"\r\n                                    >\r\n                                        {pass1 ? <VisibilityOff/> : <Visibility/>}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            )\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div style={{marginTop: 20}}>\r\n                        <TextField\r\n                            type={pass2 ? 'text' : 'password'}\r\n                            label='Confirm Password'\r\n                            size='small'\r\n                            sx={{width: 300}}\r\n                            value={password2}\r\n                            onChange={onChangePassword2}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={togglePassword2}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {pass2 ? <VisibilityOff/> : <Visibility/>}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {errorPassword\r\n                &&\r\n                <div style={{color: 'red'}}> Incorrect passwords!</div>\r\n                ||\r\n                !!errorRegister\r\n                &&\r\n                <div style={{color: 'red'}}>{errorRegister}</div>\r\n                }\r\n                <div style={{marginTop: 30}}>\r\n                    <Button\r\n                        size='medium'\r\n                        onClick={onChange}\r\n                        variant=\"contained\"\r\n                        style={{marginRight: 50}}\r\n                    >Register</Button>\r\n                    <Link to=\"/login\" style={{textDecoration: 'none'}}>\r\n                        <Button size='medium' variant=\"outlined\">Cancel</Button>\r\n                    </Link>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport {Paper} from \"@mui/material\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport SentimentVerySatisfiedIcon from '@mui/icons-material/SentimentVerySatisfied';\r\n\r\nconst useStyles = makeStyles({\r\n    stylePaper : {\r\n        width: \"413px\",\r\n        height: \"468px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        borderRadius: \"8px\",\r\n        left: \"434px\",\r\n        top: \"126px\",\r\n        padding: \"33px\",\r\n        justifyContent: \"space-evenly\",\r\n        alignItems: \"center\",\r\n    }\r\n});\r\n\r\nexport const InfoSentEmail = () => {\r\n    const email = useSelector<AppRootStateType, string>(s => s.restorePass.email)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n\r\n        <div style={{display: \"flex\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Paper className={classes.stylePaper}>\r\n                <h1>It-incubator</h1>\r\n                <div>\r\n                    <SentimentVerySatisfiedIcon color={\"success\"} style={{width:\"108px\", height:\"108px\"}}/>\r\n                </div>\r\n                <h2  style={{color: \"green\"}}>Check Email </h2>\r\n                <h4 style={{color: \"#a9a9a9\"}}>We’ve sent an Email with instructions to email {email}</h4>\r\n            </Paper>\r\n       </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {errorMessageEmail} from \"../../../reducers/restoreReducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorAlert() {\r\n\r\n    const error = useSelector<AppRootStateType, string>(state => state.restorePass.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(errorMessageEmail(\"\"))\r\n    };\r\n\r\n\r\n    const isOpen = error !== \"\"\r\n\r\n    return (\r\n        <Snackbar anchorOrigin={{vertical: \"bottom\", horizontal: \"center\"}} open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {NavLink, Route, Routes} from \"react-router-dom\";\r\nimport {Test} from \"./Test\";\r\nimport {RestorePassword} from \"./component/restorePassword/RestorePassword\";\r\nimport {Register} from './component/register/Register';\r\nimport {NewPassword} from \"./component/newPassword/newPassword\";\r\nimport {InfoSentEmail} from \"./component/restorePassword/infoSentEmail/InfoSentEmail\";\r\nimport {ErrorAlert} from \"./component/restorePassword/infoSentEmail/ErrorAlert\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div><NavLink to='/login'> Go to login</NavLink></div>\r\n            <div><NavLink to='/register'> Go to Register</NavLink></div>\r\n            <div><NavLink to='/profile'> Go to Profile</NavLink></div>\r\n            <div><NavLink to='/restore'> Go to restore password</NavLink></div>\r\n            <ErrorAlert/>\r\n            <div><NavLink to='/test'> Go to test</NavLink></div>\r\n            <div><NavLink to='/404'> Go to 404</NavLink></div>\r\n            <Routes>\r\n                <Route path='/' element={<div>default</div>}/>\r\n                <Route path='login' element={<div>Login</div>}/>\r\n                <Route path=\"register\" element={<div><Register/></div>}/>\r\n                <Route path=\"profile\" element={<div>Profile</div>}/>\r\n                <Route path=\"restore\" element={<div><RestorePassword/></div>}/>\r\n                <Route path=\"/set-new-password/:token\" element={<NewPassword/>}/>\r\n                <Route path=\"info-sent-email\" element={<InfoSentEmail/>}/>\r\n                <Route path=\"test\" element={<Test/>}/>\r\n                <Route path=\"/404\" element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer} from \"../reducers/authReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {registerReducer} from \"../reducers/registerReducer\";\r\nimport {profileReducer} from \"../reducers/profileReducer\";\r\nimport {restorePassReducer} from \"../reducers/restoreReducer\";\r\nimport {newPasswordReducer} from \"../reducers/newPasswordReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    restorePass: restorePassReducer,\r\n    newPass: newPasswordReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n            <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3-uvM\",\"errorInput\":\"SuperInputText_errorInput__36AjH\",\"error\":\"SuperInputText_error__3gt55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Restore_text__2hWHj\"};"],"sourceRoot":""}